"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4441],{3905:function(e,t,a){a.r(t),a.d(t,{MDXContext:function(){return m},MDXProvider:function(){return p},mdx:function(){return f},useMDXComponents:function(){return c},withMDXComponents:function(){return d}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s.apply(this,arguments)}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var m=n.createContext({}),d=function(e){return function(t){var a=c(t.components);return n.createElement(e,s({},t,{components:a}))}},c=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(a),p=i,h=d["".concat(r,".").concat(p)]||d[p]||u[p]||s;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var m=2;m<s;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},21847:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return d},default:function(){return p}});var n=a(87462),i=a(63366),s=(a(67294),a(3905)),r=["components"],o={id:"diagnostics",title:"Diagnostics Module",sidebar_label:"Diagnostics Module",slug:"/diagnostics"},l=void 0,m={unversionedId:"framework_topics/model_evaluation/diagnostics",id:"framework_topics/model_evaluation/diagnostics",title:"Diagnostics Module",description:"The Diagnostics module is still available but planned to be deprecated in favor of ArviZ, a third-party package for exploratory analysis of Bayesian  models.",source:"@site/../docs/framework_topics/model_evaluation/diagnostics.md",sourceDirName:"framework_topics/model_evaluation",slug:"/diagnostics",permalink:"/docs/diagnostics",editUrl:"https://github.com/facebookresearch/beanmachine/edit/master/website/../docs/framework_topics/model_evaluation/diagnostics.md",tags:[],version:"current",frontMatter:{id:"diagnostics",title:"Diagnostics Module",sidebar_label:"Diagnostics Module",slug:"/diagnostics"},sidebar:"someSidebar",previous:{title:"Proposers",permalink:"/docs/custom_proposers"},next:{title:"Posterior Predictive Checks",permalink:"/docs/posterior_predictive_checks"}},d=[{value:"Summary Statistics",id:"summary-statistics",children:[{value:"1. Getting Summary Statistics for All Queries over All Chains",id:"1-getting-summary-statistics-for-all-queries-over-all-chains",children:[],level:3},{value:"2. Getting Summary Statistics for a Subset of Queries",id:"2-getting-summary-statistics-for-a-subset-of-queries",children:[],level:3},{value:"3. Getting Summary for a Specific Chain",id:"3-getting-summary-for-a-specific-chain",children:[],level:3},{value:"4. Extending Summary with New Functions",id:"4-extending-summary-with-new-functions",children:[],level:3},{value:"5. Invoking Individual Summary Statistics Functions",id:"5-invoking-individual-summary-statistics-functions",children:[],level:3},{value:"6. Overriding an Already Registered Function",id:"6-overriding-an-already-registered-function",children:[],level:3}],level:2},{value:"Visualization",id:"visualization",children:[{value:"1. Execute All Plot-Related Functions for All Queries",id:"1-execute-all-plot-related-functions-for-all-queries",children:[],level:3},{value:"2. Execute All Plot-Related Functions for a Subset of Queries",id:"2-execute-all-plot-related-functions-for-a-subset-of-queries",children:[],level:3},{value:"3. Update and Display the Plotly Object",id:"3-update-and-display-the-plotly-object",children:[],level:3},{value:"4. Execute All Plot-Related Functions for a Specific Chain",id:"4-execute-all-plot-related-functions-for-a-specific-chain",children:[],level:3},{value:"5. Individual Calling of a Plot-Related Function",id:"5-individual-calling-of-a-plot-related-function",children:[],level:3}],level:2}],c={toc:d};function p(e){var t=e.components,a=(0,i.Z)(e,r);return(0,s.mdx)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,s.mdx)("h5",{parentName:"div"},(0,s.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,s.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.mdx)("div",{parentName:"div",className:"admonition-content"},(0,s.mdx)("p",{parentName:"div"},"The Diagnostics module is still available but planned to be deprecated in favor of ",(0,s.mdx)("a",{parentName:"p",href:"https://arviz-devs.github.io/arviz/"},"ArviZ"),", a third-party package for exploratory analysis of Bayesian  models."))),(0,s.mdx)("p",null,"This section introduces the Diagnostics class in Bean Machine (BM) which aims to assist the modeler to get insights about the model performance. Diagnostics currently supports two main components:"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"General Summary Statistics Module"),": aggregates the statistics of all or a subset of queries over a specific chain or all chains."),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Visualizer Module"),": processes samples and encapsulates the results in a ",(0,s.mdx)("a",{parentName:"p",href:"https://plotly.com/python/"},"Plotly")," graphing library object which could be used for actual visualization."),(0,s.mdx)("p",null,"Both of the BM Diagnostics components support function registration which allows the user to extend each component with new functionalities that modeler might be interested to have."),(0,s.mdx)("p",null,"The rest of this document goes over examples of how each component can be called or extended by showing how they would be used after defining the following model and running inference on it:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"@sample\ndef dirichlet(i, j):\n    return dist.Dirichlet(\n    torch.tensor([[1.0, 2.0, 3.0], [2.0, 1.0, 3.0], [2.0, 3.0, 1.0]])\n)\n\n\n@sample\ndef beta(i):\n    return dist.Beta(torch.tensor([1.0, 2.0, 3.0]), torch.tensor([9.0, 8.0, 7.0]))\n\n\n@sample\ndef normal():\n    return dist.Normal(torch.tensor([0.0, 1.0, 2.0]), torch.tensor([0.5, 1.0, 1.5]))\n\n\nmh = SingleSiteAncestralMetropolisHastings()\nchains = 2\nsamples = mh.infer([beta(0), dirichlet(1, 5), normal()], {}, 50, chains)\n")),(0,s.mdx)("h2",{id:"summary-statistics"},"Summary Statistics"),(0,s.mdx)("p",null,"Calling the ",(0,s.mdx)("inlineCode",{parentName:"p"},"summary()")," method on a sample set outputs a table including mean, standard deviation (",(0,s.mdx)("inlineCode",{parentName:"p"},"std"),"), confidence interval (",(0,s.mdx)("inlineCode",{parentName:"p"},"CI"),"), ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mover",{parentName:"mrow",accent:"true"},(0,s.mdx)("mi",{parentName:"mover"},"R"),(0,s.mdx)("mo",{parentName:"mover"},"^"))),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\hat{R}")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.9467699999999999em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord accent"},(0,s.mdx)("span",{parentName:"span",className:"vlist-t"},(0,s.mdx)("span",{parentName:"span",className:"vlist-r"},(0,s.mdx)("span",{parentName:"span",className:"vlist",style:{height:"0.9467699999999999em"}},(0,s.mdx)("span",{parentName:"span",style:{top:"-3em"}},(0,s.mdx)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"))),(0,s.mdx)("span",{parentName:"span",style:{top:"-3.25233em"}},(0,s.mdx)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.mdx)("span",{parentName:"span",className:"accent-body",style:{left:"-0.16666em"}},(0,s.mdx)("span",{parentName:"span",className:"mord"},"^")))))))))))," (",(0,s.mdx)("inlineCode",{parentName:"p"},"r-hat"),"),effective sample size (",(0,s.mdx)("inlineCode",{parentName:"p"},"n-eff"),"), as well as user-defined functions (as shown below)."),(0,s.mdx)("p",null,"Here are different ways to invoke the ",(0,s.mdx)("inlineCode",{parentName:"p"},"summary()")," function:"),(0,s.mdx)("h3",{id:"1-getting-summary-statistics-for-all-queries-over-all-chains"},"1. Getting Summary Statistics for All Queries over All Chains"),(0,s.mdx)("p",null,"Simply call ",(0,s.mdx)("inlineCode",{parentName:"p"},"summary()")," to get a comprehensive table of gathered statistics for all queries."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"out_df= Diagnostics(samples).summary()\n")),(0,s.mdx)("h3",{id:"2-getting-summary-statistics-for-a-subset-of-queries"},"2. Getting Summary Statistics for a Subset of Queries"),(0,s.mdx)("p",null,"Considering a large number of queries that the model may have, the user may hand-pick a subset of queries to confine the output table to."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"out_df = Diagnostics(samples).summary([dirichlet(1, 5), beta(0)])\n")),(0,s.mdx)("h3",{id:"3-getting-summary-for-a-specific-chain"},"3. Getting Summary for a Specific Chain"),(0,s.mdx)("p",null,"To compare how results may change over the course of a particular chain, the user can pass the chain number to the ",(0,s.mdx)("inlineCode",{parentName:"p"},"summary()")," method."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"out_df = Diagnostics(samples).summary(query_list=[dirichlet(1, 5)], chain=1)\n\n")),(0,s.mdx)("h3",{id:"4-extending-summary-with-new-functions"},"4. Extending Summary with New Functions"),(0,s.mdx)("p",null,"The user has the option to extend the summary module by registering new functions or overwrite an already available function. To add new functions, they must define a sub-class of ",(0,s.mdx)("inlineCode",{parentName:"p"},"Diagnostics")," and register new functions in the class' ",(0,s.mdx)("inlineCode",{parentName:"p"},"__init__")," function."),(0,s.mdx)("p",null,"The input to these user-defined functions must be the samples for a particular query, that is, a tensor of shape ",(0,s.mdx)("inlineCode",{parentName:"p"},"torch.Size([C, N])")," where ",(0,s.mdx)("inlineCode",{parentName:"p"},"C")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"N")," are the number of chains and samples-per-chain respectively. The samples for a query can typically be obtained by code like the following:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"samples = mh.infer(...)\nquery_samples = samples[query] ## query_samples.shape == torch.Size([C, N])\n")),(0,s.mdx)("p",null,"The following illustrates how to add a user-defined mean function to a ",(0,s.mdx)("inlineCode",{parentName:"p"},"Diagnostics")," subclass:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'def my_mean(query_samples: Tensor) -> Tensor:\n    return torch.mean(query_samples, dim=[0, 1])\n\n\nclass MyDiag(Diagnostics):\n    def __init__(self, samples: MonteCarloSamples):\n        super().__init__(samples)\n        self.my_mean_stat = self.summaryfn(my_mean, display_names=["My mean"])\n\n\ncustom_diag = MyDiag(samples)\nout = custom_diag.summary(query_list=[dirichlet(1, 5)], chain=0)\n')),(0,s.mdx)("h3",{id:"5-invoking-individual-summary-statistics-functions"},"5. Invoking Individual Summary Statistics Functions"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"# Obtaining user-defined statistic over all chains\nout_df = custom_diag.my_mean_stat([dirichlet(1, 5)])\n\n# Obtaining user-defined statistic over one chain\nout_df = custom_diag.my_mean_stat([dirichlet(1, 5)], chain = 1)\n\n# Obtaining default statistic over one chain\nout_df = custom_diag.std([dirichlet(1, 5)], chain = 1)\n\n")),(0,s.mdx)("h3",{id:"6-overriding-an-already-registered-function"},"6. Overriding an Already Registered Function"),(0,s.mdx)("p",null,"Instead of defining a new summary statistic, the user can override one of the default ones. Here the user redefines ",(0,s.mdx)("inlineCode",{parentName:"p"},"mean")," by using the following line in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"__init__")," function:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'self.mean = self.summaryfn(my_mean, display_names=["avg"])\n')),(0,s.mdx)("h2",{id:"visualization"},"Visualization"),(0,s.mdx)("p",null,"Currently we support trace plots and auto-correlation plots for samples of a requested model parameter. The user can extend this by defining new visualization functions returning a ",(0,s.mdx)("a",{parentName:"p",href:"https://plotly.com/python/"},"Plotly")," object and registering them via ",(0,s.mdx)("inlineCode",{parentName:"p"},"plotfn")," method, analogously to the way ",(0,s.mdx)("inlineCode",{parentName:"p"},"summaryfn")," was used for defining new summary statistics."),(0,s.mdx)("p",null,"Here are different ways to call plot over all, or a subset of, queries."),(0,s.mdx)("h3",{id:"1-execute-all-plot-related-functions-for-all-queries"},"1. Execute All Plot-Related Functions for All Queries"),(0,s.mdx)("p",null,"To compute all Plotly objects given a set of samples, simply invoke the ",(0,s.mdx)("inlineCode",{parentName:"p"},"plot()")," method. The method returns the Plotly objects without displaying them. To display them as well, use a ",(0,s.mdx)("inlineCode",{parentName:"p"},"display=True")," argument."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"fig = Diagnostics(samples).plot()  # returns a Plotly object\nfig = Diagnostics(samples).plot(display=True)  # returns a Plotly object and displays it\n")),(0,s.mdx)("h3",{id:"2-execute-all-plot-related-functions-for-a-subset-of-queries"},"2. Execute All Plot-Related Functions for a Subset of Queries"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"figs = Diagnostics(samples).plot(query_list=[dirichlet(1, 5)])\n")),(0,s.mdx)("h3",{id:"3-update-and-display-the-plotly-object"},"3. Update and Display the Plotly Object"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"for _i,fig in enumerate(figs):\n    fig.update_layout(paper_bgcolor=\"LightBlue\",height=1500, width=700,)\n    fig.update_layout(legend_orientation=\"h\")\n    fig.update_xaxes(title_font=dict(size=14, family='Courier', color='crimson'))\n    fig.update_yaxes(title_font=dict(size=14, family='Courier', color='crimson'))\n    plotly.offline.iplot(fig)\n")),(0,s.mdx)("h3",{id:"4-execute-all-plot-related-functions-for-a-specific-chain"},"4. Execute All Plot-Related Functions for a Specific Chain"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"figs = Diagnostics(samples).plot(query_list=[dirichlet(1, 5)], chain = 0)\n")),(0,s.mdx)("h3",{id:"5-individual-calling-of-a-plot-related-function"},"5. Individual Calling of a Plot-Related Function"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'d = Diagnostics(samples)\n\nautocorr_object = d.autocorr([dirichlet(1, 5)]) # pass "display = True" to output the plot\nautocorr_object = d.autocorr([dirichlet(1, 5)], chain = 0)\n')))}p.isMDXComponent=!0}}]);