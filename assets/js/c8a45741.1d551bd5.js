"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7104],{3905:function(e,n,r){r.r(n),r.d(n,{MDXContext:function(){return s},MDXProvider:function(){return d},mdx:function(){return f},useMDXComponents:function(){return m},withMDXComponents:function(){return c}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},i.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),c=function(e){return function(n){var r=m(n.components);return t.createElement(e,i({},n,{components:r}))}},m=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},d=function(e){var n=m(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(r),d=a,g=c["".concat(o,".").concat(d)]||c[d]||u[d]||i;return r?t.createElement(g,l(l({ref:n},s),{},{components:r})):t.createElement(g,l({ref:n},s))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},78852:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var t=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={id:"landing_page",title:"Bean Machine",sidebar_label:"Bean Machine"},p=void 0,s={unversionedId:"landing_page/landing_page",id:"landing_page/landing_page",isDocsHomePage:!1,title:"Bean Machine",description:"Declarative, programmable, efficient probabilistic inference",source:"@site/../docs/landing_page/landing_page.md",sourceDirName:"landing_page",slug:"/landing_page/landing_page",permalink:"/docs/landing_page/landing_page",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/landing_page/landing_page.md",tags:[],version:"current",frontMatter:{id:"landing_page",title:"Bean Machine",sidebar_label:"Bean Machine"}},c=[{value:"Declarative modeling",id:"declarative-modeling",children:[],level:2},{value:"Programmable inference",id:"programmable-inference",children:[],level:2},{value:"Built on PyTorch",id:"built-on-pytorch",children:[],level:2}],m={toc:c};function d(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Declarative, programmable, efficient probabilistic inference"),(0,i.mdx)("hr",null),(0,i.mdx)("h1",{id:"key-features"},"Key Features"),(0,i.mdx)("h2",{id:"declarative-modeling"},"Declarative modeling"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.mdx)("p",null,"Clean, intuitive syntax that lets you focus on the model and leave performance to the framework"),(0,i.mdx)("h2",{id:"programmable-inference"},"Programmable inference"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.mdx)("p",null,"Mix-and-match inference methods, proposers, and inference strategies to achieve maximum efficiency"),(0,i.mdx)("h2",{id:"built-on-pytorch"},"Built on PyTorch"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.mdx)("p",null,"Leverage native GPU and autograd support and integrate seamlessly with the PyTorch ecosystem"),(0,i.mdx)("hr",null),(0,i.mdx)("h1",{id:"get-started"},"Get started"),(0,i.mdx)("p",null,"1","."," ",(0,i.mdx)("strong",{parentName:"p"},"Install dependencies:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-sh"},"pip install numpy pytest torch\n")),(0,i.mdx)("p",null,"2","."," ",(0,i.mdx)("strong",{parentName:"p"},"Install Bean Machine:")),(0,i.mdx)("p",null,"  <! -- NOTE: I had to use ",(0,i.mdx)("inlineCode",{parentName:"p"},"sudo")," when running the setup script. RESPONSE: ",(0,i.mdx)("inlineCode",{parentName:"p"},"sudo")," is only needed when not installing in a virtualenv --\x3e"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/facebookincubator/BeanMachine.git\ncd BeanMachine\npython setup.py install\n")),(0,i.mdx)("p",null,"3","."," ",(0,i.mdx)("strong",{parentName:"p"},"Define model:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-py"},"from torch.distributions import Bernoulli, Beta\nfrom beanmachine.ppl import random_variable\n\n@random_variable\ndef p():\n    return Beta(1, 1)\n\n@random_variable\ndef toss(i: int):\n    return Bernoulli(p())\n")),(0,i.mdx)("p",null,"4","."," ",(0,i.mdx)("strong",{parentName:"p"},"Bind observations:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-py"},"from torch import tensor\n\nobservations = {\n    toss(1): tensor(0.0),\n    toss(2): tensor(1.0),\n    toss(3): tensor(0.0),\n    toss(4): tensor(1.0),\n    toss(5): tensor(0.0),\n    toss(6): tensor(1.0),\n}\n")),(0,i.mdx)("p",null,"5","."," ",(0,i.mdx)("strong",{parentName:"p"},"Run inference:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-py"},"import beanmachine.ppl as bm\n\nsamples = bm.SingleSiteUniformMetropolisHastings().infer(\n    queries=[p()],\n    observations=observations,\n    num_samples=1000,\n)\n")),(0,i.mdx)("p",null,"6","."," ",(0,i.mdx)("strong",{parentName:"p"},"Process results:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-py"},"from beanmachine.ppl.diagnostics.diagnostics import Diagnostics\n\nprint(Diagnostics(samples).summary())\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-py"},"           avg      std     2.5%      50%    97.5%    r_hat       n_eff\np()[]   0.5022   0.1683   0.1816   0.5060   0.8229   1.0037   1578.1005\n")),(0,i.mdx)("p",null,"7","."," ",(0,i.mdx)("strong",{parentName:"p"},"Run tests:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-sh"},"pytest --pyargs beanmachine\n")))}d.isMDXComponent=!0}}]);