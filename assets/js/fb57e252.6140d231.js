"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8680],{3905:function(a,e,m){m.r(e),m.d(e,{MDXContext:function(){return o},MDXProvider:function(){return c},mdx:function(){return x},useMDXComponents:function(){return d},withMDXComponents:function(){return l}});var n=m(67294);function t(a,e,m){return e in a?Object.defineProperty(a,e,{value:m,enumerable:!0,configurable:!0,writable:!0}):a[e]=m,a}function s(){return s=Object.assign||function(a){for(var e=1;e<arguments.length;e++){var m=arguments[e];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&(a[n]=m[n])}return a},s.apply(this,arguments)}function r(a,e){var m=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),m.push.apply(m,n)}return m}function p(a){for(var e=1;e<arguments.length;e++){var m=null!=arguments[e]?arguments[e]:{};e%2?r(Object(m),!0).forEach((function(e){t(a,e,m[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(m)):r(Object(m)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(m,e))}))}return a}function i(a,e){if(null==a)return{};var m,n,t=function(a,e){if(null==a)return{};var m,n,t={},s=Object.keys(a);for(n=0;n<s.length;n++)m=s[n],e.indexOf(m)>=0||(t[m]=a[m]);return t}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)m=s[n],e.indexOf(m)>=0||Object.prototype.propertyIsEnumerable.call(a,m)&&(t[m]=a[m])}return t}var o=n.createContext({}),l=function(a){return function(e){var m=d(e.components);return n.createElement(a,s({},e,{components:m}))}},d=function(a){var e=n.useContext(o),m=e;return a&&(m="function"==typeof a?a(e):p(p({},e),a)),m},c=function(a){var e=d(a.components);return n.createElement(o.Provider,{value:e},a.children)},N={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(a,e){var m=a.components,t=a.mdxType,s=a.originalType,r=a.parentName,o=i(a,["components","mdxType","originalType","parentName"]),l=d(m),c=t,h=l["".concat(r,".").concat(c)]||l[c]||N[c]||s;return m?n.createElement(h,p(p({ref:e},o),{},{components:m})):n.createElement(h,p({ref:e},o))}));function x(a,e){var m=arguments,t=e&&e.mdxType;if("string"==typeof a||t){var s=m.length,r=new Array(s);r[0]=h;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=a,p.mdxType="string"==typeof a?a:t,r[1]=p;for(var o=2;o<s;o++)r[o]=m[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,m)}h.displayName="MDXCreateElement"},85471:function(a,e,m){m.r(e),m.d(e,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return l},default:function(){return c}});var n=m(87462),t=m(63366),s=(m(67294),m(3905)),r=["components"],p={id:"random_walk",title:"Single-Site Random Walk Metropolis Hastings",sidebar_label:"Single-Site Random Walk Metropolis Hastings",slug:"/random_walk"},i=void 0,o={unversionedId:"framework_topics/inference/random_walk",id:"framework_topics/inference/random_walk",isDocsHomePage:!1,title:"Single-Site Random Walk Metropolis Hastings",description:"Bean Machine offers a module for Random Walk Metropolis-Hastings (RWMH), a simple minimal MCMC inference method. The RWMH module is single-site by default, following the philosophy of most inference methods in Bean Machine, and accordingly block-inference patterns are well supported. RWMH precisely follows the standard Metropolos-Hastings algorithm of sampling a value from a proposal distribution, and then running accept-reject according to the computed ratio of the proposed value. This tutorial describes the proposal mechanism, describes adaptive RWMH, and documents the API for the RWMH module.",source:"@site/../docs/framework_topics/inference/random_walk.md",sourceDirName:"framework_topics/inference",slug:"/random_walk",permalink:"/docs/random_walk",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/framework_topics/inference/random_walk.md",tags:[],version:"current",frontMatter:{id:"random_walk",title:"Single-Site Random Walk Metropolis Hastings",sidebar_label:"Single-Site Random Walk Metropolis Hastings",slug:"/random_walk"},sidebar:"someSidebar",previous:{title:"Single Site Uniform Metropolis-Hastings",permalink:"/docs/uniform_metropolis_hastings"},next:{title:"Hamiltoniam Monte Carlo",permalink:"/docs/hamiltonian_monte_carlo"}},l=[],d={toc:l};function c(a){var e=a.components,m=(0,t.Z)(a,r);return(0,s.mdx)("wrapper",(0,n.Z)({},d,m,{components:e,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"Bean Machine offers a module for Random Walk Metropolis-Hastings (RWMH), a simple minimal MCMC inference method. The RWMH module is single-site by default, following the philosophy of most inference methods in Bean Machine, and accordingly block-inference patterns are well supported. RWMH precisely follows the standard Metropolos-Hastings algorithm of sampling a value from a proposal distribution, and then running accept-reject according to the computed ratio of the proposed value. This tutorial describes the proposal mechanism, describes adaptive RWMH, and documents the API for the RWMH module."),(0,s.mdx)("h1",{id:"proposer"},"Proposer"),(0,s.mdx)("p",null,"The RWMH module has multiple proposers defined on different spaces such as all real numbers, positive real numbers, or intervals of the real numbers. These proposers all have common properties used to propose a new value ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"Y")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Y")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"Y")))))," from a current value ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"X")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"X")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"))))),". The proposal distribution ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"q"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.mdx)("mi",{parentName:"mrow"},"X"),(0,s.mdx)("mo",{parentName:"mrow",separator:"true"},","),(0,s.mdx)("mi",{parentName:"mrow"},"Y"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"q(X,Y)")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"q"),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"("),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"),(0,s.mdx)("span",{parentName:"span",className:"mpunct"},","),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"Y"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},")")))))," is constructed to satisfy the following properties ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2200"),(0,s.mdx)("mi",{parentName:"mrow"},"X")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\forall X")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},"\u2200"),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"))))),":"),(0,s.mdx)("div",{className:"math math-display"},(0,s.mdx)("span",{parentName:"div",className:"katex-display"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow",mathvariant:"double-struck"},"E"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.mdx)("mi",{parentName:"mrow"},"q"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.mdx)("mi",{parentName:"mrow"},"X"),(0,s.mdx)("mo",{parentName:"mrow",separator:"true"},","),(0,s.mdx)("mo",{parentName:"mrow"},"\u22c5"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.mdx)("mo",{parentName:"mrow"},"="),(0,s.mdx)("mi",{parentName:"mrow"},"X")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathbb{E}[ q(X, \\cdot) ]= X")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},(0,s.mdx)("span",{parentName:"span",className:"mord mathbb"},"E")),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"["),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"q"),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"("),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"),(0,s.mdx)("span",{parentName:"span",className:"mpunct"},","),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},"\u22c5"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},")"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},"]"),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.mdx)("span",{parentName:"span",className:"mrel"},"="),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X")))))),(0,s.mdx)("div",{className:"math math-display"},(0,s.mdx)("span",{parentName:"div",className:"katex-display"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow",mathvariant:"double-struck"},"V"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.mdx)("mi",{parentName:"mrow"},"q"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.mdx)("mi",{parentName:"mrow"},"X"),(0,s.mdx)("mo",{parentName:"mrow",separator:"true"},","),(0,s.mdx)("mo",{parentName:"mrow"},"\u22c5"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.mdx)("mo",{parentName:"mrow"},"="),(0,s.mdx)("msup",{parentName:"mrow"},(0,s.mdx)("mi",{parentName:"msup"},"\u03c3"),(0,s.mdx)("mn",{parentName:"msup"},"2"))),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathbb{V} [q(X, \\cdot)] = \\sigma^2")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},(0,s.mdx)("span",{parentName:"span",className:"mord mathbb"},"V")),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"["),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"q"),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"("),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"),(0,s.mdx)("span",{parentName:"span",className:"mpunct"},","),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},"\u22c5"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},")"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},"]"),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.mdx)("span",{parentName:"span",className:"mrel"},"="),(0,s.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.8641079999999999em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord"},(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3"),(0,s.mdx)("span",{parentName:"span",className:"msupsub"},(0,s.mdx)("span",{parentName:"span",className:"vlist-t"},(0,s.mdx)("span",{parentName:"span",className:"vlist-r"},(0,s.mdx)("span",{parentName:"span",className:"vlist",style:{height:"0.8641079999999999em"}},(0,s.mdx)("span",{parentName:"span",style:{top:"-3.113em",marginRight:"0.05em"}},(0,s.mdx)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.mdx)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.mdx)("span",{parentName:"span",className:"mord mtight"},"2"))))))))))))),(0,s.mdx)("p",null,"Note that we haven't defined ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"\u03c3")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," yet in this tutorial, but the key property to note is that this is a fixed positive number. ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"\u03c3")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," is essentially a hyperparameter of the inference algorithm which must be set by the user, and it must be fixed for the duration of inference. An exception is adaptive inference, a method we describe below which tunes ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"\u03c3")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," by essentially looking at the observed data. However, it is important to note that when adaptive RWMH is used, samples drawn during adaptation are not valid, as they potentially violate the balance equations of MCMC."),(0,s.mdx)("h1",{id:"adaptive-rwmh"},"Adaptive RWMH"),(0,s.mdx)("p",null,"The RWMH module is an exemplar use of the Bean Machine pattern for Adaptive inference, and this is enabled by using the argument ",(0,s.mdx)("inlineCode",{parentName:"p"},"num_adaptive_samples")," in the call to ",(0,s.mdx)("inlineCode",{parentName:"p"},"infer()"),". This turns on the adaptation module for the specified number of samples, tunes the proposer of the inference method during these timesteps, and records these samples as adaptive samples in the created ",(0,s.mdx)("inlineCode",{parentName:"p"},"MonteCarloSamples")," object. The adaptation method used is a single-site adaptation of a well known pattern of doing asympototically smaller steps on the value ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"l"),(0,s.mdx)("mi",{parentName:"mrow"},"o"),(0,s.mdx)("mi",{parentName:"mrow"},"g"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.mdx)("mi",{parentName:"mrow"},"\u03c3"),(0,s.mdx)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"log(\\sigma)")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.mdx)("span",{parentName:"span",className:"mopen"},"("),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3"),(0,s.mdx)("span",{parentName:"span",className:"mclose"},")"))))),". Details of this method can be found at ",(0,s.mdx)("a",{parentName:"p",href:"http://www.stats.ox.ac.uk/~evans/CDT/Adaptive.pdf"},"http://www.stats.ox.ac.uk/~evans/CDT/Adaptive.pdf"),"."),(0,s.mdx)("h1",{id:"api"},"API"),(0,s.mdx)("p",null,"The API can be called as follows. Note that ",(0,s.mdx)("span",{parentName:"p",className:"math math-inline"},(0,s.mdx)("span",{parentName:"span",className:"katex"},(0,s.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,s.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.mdx)("semantics",{parentName:"math"},(0,s.mdx)("mrow",{parentName:"semantics"},(0,s.mdx)("mi",{parentName:"mrow"},"\u03c3")),(0,s.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,s.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.mdx)("span",{parentName:"span",className:"base"},(0,s.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.mdx)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," is denoted as ",(0,s.mdx)("inlineCode",{parentName:"p"},"step_size")," in the constructor."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"from beanmachine.ppl import SingleSiteRandomWalk\n\nmonte_carlo_samples = SingleSiteRandomWalk(\n  step_size = 2.0,\n).infer(\n  queries,\n  observations,\n  num_adapt_steps = 1000,\n  num_steps = 200,\n)\n\n")),(0,s.mdx)("p",null,"If desired, ",(0,s.mdx)("inlineCode",{parentName:"p"},"step_size")," does not need to be set, and it will be initialized to the default initial value ",(0,s.mdx)("inlineCode",{parentName:"p"},"1.0"),". Either way, if ",(0,s.mdx)("inlineCode",{parentName:"p"},"num_adapt_steps>0")," is set, then ",(0,s.mdx)("inlineCode",{parentName:"p"},"step_size")," will be changed after inference begins."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre"},"from beanmachine.ppl import SingleSiteRandomWalk\n\nmonte_carlo_samples = SingleSiteRandomWalk().infer(\n  queries,\n  observations,\n  num_adapt_steps = 1000,\n  num_steps = 200,\n)\n\n")))}c.isMDXComponent=!0}}]);