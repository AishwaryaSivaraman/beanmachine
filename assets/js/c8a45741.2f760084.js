"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7104],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8852:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"landing_page",title:"Bean Machine",sidebar_label:"Bean Machine"},p=void 0,s={unversionedId:"landing_page/landing_page",id:"landing_page/landing_page",isDocsHomePage:!1,title:"Bean Machine",description:"Declarative, programmable, efficient probabilistic inference",source:"@site/../docs/landing_page/landing_page.md",sourceDirName:"landing_page",slug:"/landing_page/landing_page",permalink:"/docs/landing_page/landing_page",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/landing_page/landing_page.md",tags:[],version:"current",frontMatter:{id:"landing_page",title:"Bean Machine",sidebar_label:"Bean Machine"}},c=[{value:"Declarative modeling",id:"declarative-modeling",children:[]},{value:"Programmable inference",id:"programmable-inference",children:[]},{value:"Built on PyTorch",id:"built-on-pytorch",children:[]}],u={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Declarative, programmable, efficient probabilistic inference"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"key-features"},"Key Features"),(0,i.kt)("h2",{id:"declarative-modeling"},"Declarative modeling"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.kt)("p",null,"Clean, intuitive syntax that lets you focus on the model and leave performance to the framework"),(0,i.kt)("h2",{id:"programmable-inference"},"Programmable inference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.kt)("p",null,"Mix-and-match inference methods, proposers, and inference strategies to achieve maximum efficiency"),(0,i.kt)("h2",{id:"built-on-pytorch"},"Built on PyTorch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-viz"},'digraph {\n  n1[label="Asset\\nrequired"]\n}\n')),(0,i.kt)("p",null,"Leverage native GPU and autograd support and integrate seamlessly with the PyTorch ecosystem"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"get-started"},"Get started"),(0,i.kt)("p",null,"1","."," ",(0,i.kt)("strong",{parentName:"p"},"Install dependencies:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pip install numpy pytest torch\n")),(0,i.kt)("p",null,"2","."," ",(0,i.kt)("strong",{parentName:"p"},"Install Bean Machine:")),(0,i.kt)("p",null,"  <! -- NOTE: I had to use ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo")," when running the setup script. RESPONSE: ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo")," is only needed when not installing in a virtualenv --\x3e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/facebookincubator/BeanMachine.git\ncd BeanMachine\npython setup.py install\n")),(0,i.kt)("p",null,"3","."," ",(0,i.kt)("strong",{parentName:"p"},"Define model:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from torch.distributions import Bernoulli, Beta\nfrom beanmachine.ppl import random_variable\n\n@random_variable\ndef p():\n    return Beta(1, 1)\n\n@random_variable\ndef toss(i: int):\n    return Bernoulli(p())\n")),(0,i.kt)("p",null,"4","."," ",(0,i.kt)("strong",{parentName:"p"},"Bind observations:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from torch import tensor\n\nobservations = {\n    toss(1): tensor(0.0),\n    toss(2): tensor(1.0),\n    toss(3): tensor(0.0),\n    toss(4): tensor(1.0),\n    toss(5): tensor(0.0),\n    toss(6): tensor(1.0),\n}\n")),(0,i.kt)("p",null,"5","."," ",(0,i.kt)("strong",{parentName:"p"},"Run inference:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from beanmachine.ppl.inference import SingleSiteUniformMetropolisHastings\n\nsamples = SingleSiteUniformMetropolisHastings().infer(\n    queries=[p()],\n    observations=observations,\n    num_samples=1000,\n)\n")),(0,i.kt)("p",null,"6","."," ",(0,i.kt)("strong",{parentName:"p"},"Process results:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from beanmachine.ppl.diagnostics.diagnostics import Diagnostics\n\nprint(Diagnostics(samples).summary())\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"           avg      std     2.5%      50%    97.5%    r_hat       n_eff\np()[]   0.5022   0.1683   0.1816   0.5060   0.8229   1.0037   1578.1005\n")),(0,i.kt)("p",null,"7","."," ",(0,i.kt)("strong",{parentName:"p"},"Run tests:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pytest --pyargs beanmachine\n")))}m.isMDXComponent=!0}}]);