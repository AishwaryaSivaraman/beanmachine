"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1965],{3905:function(e,a,n){n.r(a),n.d(a,{MDXContext:function(){return l},MDXProvider:function(){return c},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return d}});var t=n(67294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},r.apply(this,arguments)}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function m(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=t.createContext({}),d=function(e){return function(a){var n=p(a.components);return t.createElement(e,r({},a,{components:n}))}},p=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(l.Provider,{value:a},e.children)},h={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,u=d["".concat(o,".").concat(c)]||d[c]||h[c]||r;return n?t.createElement(u,s(s({ref:a},l),{},{components:n})):t.createElement(u,s({ref:a},l))}));function f(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var m in a)hasOwnProperty.call(a,m)&&(s[m]=a[m]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49607:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var t=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],s={id:"why_bean_machine",title:"Why Bean Machine?",sidebar_label:"Why Bean Machine?",slug:"/why_bean_machine"},m=void 0,l={unversionedId:"overview/why_bean_machine/why_bean_machine",id:"overview/why_bean_machine/why_bean_machine",title:"Why Bean Machine?",description:"Bean Machine is a probabilistic programming language that makes developing and deploying generative probabilistic models intuitive and efficient. This page describes the motivation for using Probabilistic Programming in general, and Bean Machine advantages specifically.",source:"@site/../docs/overview/why_bean_machine/why_bean_machine.md",sourceDirName:"overview/why_bean_machine",slug:"/why_bean_machine",permalink:"/docs/why_bean_machine",editUrl:"https://github.com/facebookresearch/beanmachine/edit/master/website/../docs/overview/why_bean_machine/why_bean_machine.md",tags:[],version:"current",frontMatter:{id:"why_bean_machine",title:"Why Bean Machine?",sidebar_label:"Why Bean Machine?",slug:"/why_bean_machine"},sidebar:"someSidebar",next:{title:"Quick Start",permalink:"/docs/quickstart"}},d=[{value:"Probabilistic Programming",id:"probabilistic-programming",children:[{value:"Generative models",id:"generative-models",children:[],level:3},{value:"Generative Probabilistic Models",id:"generative-probabilistic-models",children:[],level:3},{value:"Inference",id:"inference",children:[],level:3},{value:"Where Does Bean Machine Fit In?",id:"where-does-bean-machine-fit-in",children:[],level:3},{value:"Target Audience",id:"target-audience",children:[],level:3}],level:2},{value:"Bean Machine Advantages",id:"bean-machine-advantages",children:[{value:"Site-based inference",id:"site-based-inference",children:[],level:3},{value:"Declarative modeling",id:"declarative-modeling",children:[],level:3},{value:"Programmable inference",id:"programmable-inference",children:[],level:3},{value:"Advanced methods",id:"advanced-methods",children:[],level:3},{value:"Bean Machine Graph compilation",id:"bean-machine-graph-compilation",children:[],level:3}],level:2}],p={toc:d};function c(e){var a=e.components,s=(0,i.Z)(e,o);return(0,r.mdx)("wrapper",(0,t.Z)({},p,s,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Bean Machine is a probabilistic programming language that makes developing and deploying generative probabilistic models intuitive and efficient. This page describes the motivation for using ",(0,r.mdx)("a",{parentName:"p",href:"#probabilistic-programming"},"Probabilistic Programming")," in general, and ",(0,r.mdx)("a",{parentName:"p",href:"#bean-machine-advantages"},"Bean Machine advantages")," specifically."),(0,r.mdx)("h2",{id:"probabilistic-programming"},"Probabilistic Programming"),(0,r.mdx)("h3",{id:"generative-models"},"Generative models"),(0,r.mdx)("p",null,"Bean Machine's generative modeling is concerned not only with providing useful predictions (as traditional ML techniques do), but also with estimating the uncertainty inherent in the problem at hand in the form of probability distributions. Estimating uncertainty helps ensure that predictions are reliable and robust."),(0,r.mdx)("p",null,"Generative modeling with Bean Machine offers many benefits:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("strong",{parentName:"li"},"Uncertainty estimation."),"  Predictions are quantified with reliable measures of uncertainty in the form of probability distributions. An analyst can understand not only the system's prediction, but also the relative likelihood of other possibilities."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("strong",{parentName:"li"},"Expressivity."),"  It's extremely easy to encode a rich model directly in source code. This allows one to match the structure of the model to the structure of the problem."),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("strong",{parentName:"li"},"Interpretability."),"  Because the model matches the domain, one can query intermediate variables within the model as conceptually meaningful properties. This can be used to interpret ",(0,r.mdx)("em",{parentName:"li"},"why")," a particular prediction was made, and can aid the model development process.")),(0,r.mdx)("h3",{id:"generative-probabilistic-models"},"Generative Probabilistic Models"),(0,r.mdx)("p",null,"A generative probabilistic model consists of ",(0,r.mdx)("strong",{parentName:"p"},"random variables")," and ",(0,r.mdx)("strong",{parentName:"p"},"conditional probability distributions")," (CPDs) that encode knowledge about some domain. For example, consider a simplified model for the spread of infectious diseases, where we wish to express the idea that the average number of new cases on a given day is proportional to the current number of infections, with the proportionality constant being the daily reproduction rate of the disease. In order to express this mathematically, it is common practice to rely on ",(0,r.mdx)("em",{parentName:"p"},"elementary probability distributions")," (EPDs) with well known statistics, such as the ",(0,r.mdx)("em",{parentName:"p"},"Poisson")," distribution here:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"num_new_cases ~ Poisson(reproduction_rate * num_infected)\n")),(0,r.mdx)("p",null,(0,r.mdx)("img",{src:n(64821).Z})),(0,r.mdx)("p",null,"Let's fix for now the value of ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_infected"),", then the above statement gives the CPD of the random variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_new_cases"),", conditioned on the value of its ",(0,r.mdx)("strong",{parentName:"p"},"parent")," random variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate"),". Since the parameter of the Poisson distribution is also its mean, this CPD is consistent with the knowledge that we were trying to express."),(0,r.mdx)("p",null,"A well-formed generative model must specify the EPD or CPD of each random variable, and the ",(0,r.mdx)("strong",{parentName:"p"},"directed graph")," induced by all the parent-child relationships among random variables must be ",(0,r.mdx)("strong",{parentName:"p"},"acyclic"),". To complete our model, we must therefore also specify a distribution for the random variable ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate"),". In the case of new diseases, where we don't know anything yet about the actual reproduction rate, this poses a seemingly intractable problem. In the ",(0,r.mdx)("strong",{parentName:"p"},"Bayesian approach")," to this problem, we specify the probability distributions of random variables without parents as our ",(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)("em",{parentName:"strong"},"a priori"))," beliefs (i.e., before seeing any data) about them. So, in this example, if infectious disease experts believe that a new disease would have a daily reproduction rate which is strictly positive and could be expected to be drawn from a distribution with a mean of 0.1, then we could express this belief with the help of another EPD, the ",(0,r.mdx)("em",{parentName:"p"},"Exponential")," distribution, as follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"reproduction_rate ~ Exponential(1 / 0.1)\n")),(0,r.mdx)("p",null,(0,r.mdx)("img",{src:n(97629).Z})),(0,r.mdx)("h3",{id:"inference"},"Inference"),(0,r.mdx)("p",null,"Given a generative model, the natural next step is to use it to perform inference. Inference is the process of combining a ",(0,r.mdx)("strong",{parentName:"p"},"model")," with ",(0,r.mdx)("strong",{parentName:"p"},"data")," to obtain ",(0,r.mdx)("strong",{parentName:"p"},"insights"),", in the form of ",(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)("em",{parentName:"strong"},"a posteriori"))," beliefs over values of interest. Our documentation refers to the data as ",(0,r.mdx)("em",{parentName:"p"},'"observations"'),", to the values of interest as ",(0,r.mdx)("em",{parentName:"p"},'"queried random variables"'),", and to the insights as ",(0,r.mdx)("em",{parentName:"p"},'"posterior distributions"'),"."),(0,r.mdx)("p",null,"In our example above, let's say we observe that ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_infected = 1087980")," and that ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_new_cases = 238154"),". Now, given this observation, we might want to query the posterior distribution for ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate"),". Mathematically speaking, we seek the following CPD:"),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"math math-inline"},(0,r.mdx)("span",{parentName:"span",className:"katex"},(0,r.mdx)("span",{parentName:"span",className:"katex-mathml"},(0,r.mdx)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.mdx)("semantics",{parentName:"math"},(0,r.mdx)("mrow",{parentName:"semantics"},(0,r.mdx)("mi",{parentName:"mrow",mathvariant:"double-struck"},"P"),(0,r.mdx)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.mdx)("mtext",{parentName:"mrow",mathvariant:"monospace"},"reproduction_rate"),(0,r.mdx)("mtext",{parentName:"mrow"},"\u2009"),(0,r.mdx)("mo",{parentName:"mrow"},"\u2223"),(0,r.mdx)("mtext",{parentName:"mrow"},"\u2009"),(0,r.mdx)("mtext",{parentName:"mrow",mathvariant:"monospace"},"num_infected"),(0,r.mdx)("mo",{parentName:"mrow"},"="),(0,r.mdx)("mn",{parentName:"mrow"},"1087980"),(0,r.mdx)("mo",{parentName:"mrow",separator:"true"},","),(0,r.mdx)("mtext",{parentName:"mrow"},"\u2005\u200a"),(0,r.mdx)("mtext",{parentName:"mrow",mathvariant:"monospace"},"num_new_cases"),(0,r.mdx)("mo",{parentName:"mrow"},"="),(0,r.mdx)("mn",{parentName:"mrow"},"238154"),(0,r.mdx)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.mdx)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathbb{P}(\\texttt{reproduction\\_rate} \\,\\mid\\, \\texttt{num\\_infected}=1087980,\\; \\texttt{num\\_new\\_cases} = 238154)")))),(0,r.mdx)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.mdx)("span",{parentName:"span",className:"base"},(0,r.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.mdx)("span",{parentName:"span",className:"mord"},(0,r.mdx)("span",{parentName:"span",className:"mord mathbb"},"P")),(0,r.mdx)("span",{parentName:"span",className:"mopen"},"("),(0,r.mdx)("span",{parentName:"span",className:"mord text"},(0,r.mdx)("span",{parentName:"span",className:"mord texttt"},"reproduction_rate")),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.mdx)("span",{parentName:"span",className:"mrel"},"\u2223"),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.mdx)("span",{parentName:"span",className:"base"},(0,r.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.70625em",verticalAlign:"-0.09514em"}}),(0,r.mdx)("span",{parentName:"span",className:"mord text"},(0,r.mdx)("span",{parentName:"span",className:"mord texttt"},"num_infected")),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.mdx)("span",{parentName:"span",className:"mrel"},"="),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.mdx)("span",{parentName:"span",className:"base"},(0,r.mdx)("span",{parentName:"span",className:"strut",style:{height:"0.8388800000000001em",verticalAlign:"-0.19444em"}}),(0,r.mdx)("span",{parentName:"span",className:"mord"},"1"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"0"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"8"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"7"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"9"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"8"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"0"),(0,r.mdx)("span",{parentName:"span",className:"mpunct"},","),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.mdx)("span",{parentName:"span",className:"mord text"},(0,r.mdx)("span",{parentName:"span",className:"mord texttt"},"num_new_cases")),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.mdx)("span",{parentName:"span",className:"mrel"},"="),(0,r.mdx)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.mdx)("span",{parentName:"span",className:"base"},(0,r.mdx)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.mdx)("span",{parentName:"span",className:"mord"},"2"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"3"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"8"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"1"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"5"),(0,r.mdx)("span",{parentName:"span",className:"mord"},"4"),(0,r.mdx)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.mdx)("p",null,"One way to understand the semantics of the inference task is to think of a generative probabilistic model as specifying a distribution over possible ",(0,r.mdx)("strong",{parentName:"p"},"worlds"),". A world can be thought of as an assignment of specific admissible values to all random variables in the model. So, for example, some possible worlds in our case are:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"reproduction_rate = 0.01, num_new_cases = 9000"),","),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"reproduction_rate = 0.1, num_new_cases = 90000"),", or"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"reproduction_rate = 0.9, num_new_cases = 800000"),".")),(0,r.mdx)("p",null,"Our generative model specifies a ",(0,r.mdx)("em",{parentName:"p"},"joint")," probability distribution over each of these worlds, based on the ",(0,r.mdx)("em",{parentName:"p"},"prior")," distribution we've chosen for ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate")," and the ",(0,r.mdx)("em",{parentName:"p"},"likelihood")," of ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_new_cases")," given some ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate"),". Now, the inference task is to restrict attention to only those worlds in which ",(0,r.mdx)("inlineCode",{parentName:"p"},"num_new_cases = 238154"),". We're interested in learning the resulting ",(0,r.mdx)("em",{parentName:"p"},"posterior")," distribution over ",(0,r.mdx)("inlineCode",{parentName:"p"},"reproduction_rate")," assignments within these worlds that are compatible with our observation."),(0,r.mdx)("h3",{id:"where-does-bean-machine-fit-in"},"Where Does Bean Machine Fit In?"),(0,r.mdx)("p",null,"In the rest of this Overview we'll introduce you to Bean Machine's syntax, and show you how it can be used to learn about problems like this one. Traditionally, lots of painstaking, hand-crafted work has gone into modeling generative scenarios. Bean Machine aims to handle all of the manual work involved in fitting data to your model, leaving you to focus on the exciting part: the problem itself! Keep on reading to find out how."),(0,r.mdx)("h3",{id:"target-audience"},"Target Audience"),(0,r.mdx)("p",null,"While we hope that the guides you'll find here are relevant to anyone with an ML background, there are excellent resources available if this is your first exposure to Bayesian analysis! We highly recommend the excellent YouTube series ",(0,r.mdx)("em",{parentName:"p"},(0,r.mdx)("a",{parentName:"em",href:"https://www.youtube.com/playlist?list=PLDcUM9US4XdNM4Edgs7weiyIguLSToZRI"},"Statistical Rethinking")),", which walks through Bayesian thinking and probabilistic modeling. For a more hands-on experience, you can check out the free, online tutorial ",(0,r.mdx)("em",{parentName:"p"},(0,r.mdx)("a",{parentName:"em",href:"https://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/#contents"},"Bayesian Methods for Hackers")),"."),(0,r.mdx)("p",null,"If you have previous knowledge of probabilistic programming, you may want to read below to learn more about specific details of the Bean Machine system. Otherwise, you can go directly to ",(0,r.mdx)("a",{parentName:"p",href:"../quickstart"},"Quick Start")," for details on how Bean Machine is used!"),(0,r.mdx)("h2",{id:"bean-machine-advantages"},"Bean Machine Advantages"),(0,r.mdx)("p",null,"Bean Machine builds on top of PyTorch with a declarative modeling syntax, being therefore simultaneously performant and intuitive for building probabilistic models. It provides further value by implementing cutting-edge inference algorithms and allowing the user to select and program custom inferences for different problems and subproblems."),(0,r.mdx)("h3",{id:"site-based-inference"},"Site-based inference"),(0,r.mdx)("p",null,'Bean Machine uses a site-based inference engine. "Sites" are random variable families, and Bean Machine uses these families to enable a modular inference engine.'),(0,r.mdx)("p",null,'The simplest form of site-based inference is called "single-site" inference. In the single-site paradigm, models are built up from random variables that can be reasoned about individually. Bean Machine can exploit this modularity to update random variables one-at-a-time, reducing unnecessary computation and enabling posterior updates that might not be possible if processing the entire model in one go.'),(0,r.mdx)("p",null,'Bean Machine also supports "multi-site" inference, in which sites are families of multiple random variables are reasoned about jointly. This increases complexity during inference, but it allows the engine to exploit inter-site correlations when fitting the posterior distribution.'),(0,r.mdx)("p",null,"Altogether, site-based inference is a flexible pattern for trading off complexity and modularity, and enables the advanced techniques outlined below."),(0,r.mdx)("h3",{id:"declarative-modeling"},"Declarative modeling"),(0,r.mdx)("p",null,"In Bean Machine, random variables are implemented as decorated Python functions, which naturally form an interface for the model. Using functions makes it simple to determine a random variable's definition, since it is contained in a function that is usually only a few lines long. This lets you directly refer to random variables to access inferred distributions or when binding data to your model. This is safer and more natural than relying on string identifiers, and also enables IDE support and type-checking in many cases."),(0,r.mdx)("p",null,"Declarative modeling also frees the inference engine to reorder model execution. Foremost, it enables computation of immediate dependencies for random variables. This makes it possible to propose new values for a random variable by examining only its dependencies, saving significant amounts of compute in models with complex structure."),(0,r.mdx)("h3",{id:"programmable-inference"},"Programmable inference"),(0,r.mdx)("p",null,"Bean Machine allows the user to design and apply powerful inference methods. Because Bean Machine can propose updates for random variables individually, the user is free to customize the ",(0,r.mdx)("em",{parentName:"p"},"method"),' which it uses to propose those values. Different inference methods can be supplied for different families of random variables. For example, a particular model can leverage gradient information when proposing values for differentiable random variables, and at the same time might sample from discrete ones with a particle filter. This single-site "compositional inference" pattern enables seamless interoperation among any MCMC-based inference strategies.'),(0,r.mdx)("p",null,'Though powerful, compositional inference limits Bean Machine\'s global understanding of the model. To combat this, Bean Machine exposes a separate functionality to allow joint processing of multiple sites. This "multi-site inference" causes Bean Machine to process both sites together before updating either, which is especially useful for updating highly-correlated random variables. Certain inference methods may be able to further exploit multi-sites with inference-specific optimizations.  Since multi-site inference is orthogonal to compositional inference, it allows you to create sophisticated, model-specific inference strategies with virtually no additional effort.'),(0,r.mdx)("h3",{id:"advanced-methods"},"Advanced methods"),(0,r.mdx)("p",null,"Bean Machine supports a variety of classic inference methods such as ancestral sampling and the No-U-Turn sampler (NUTS). However, the framework also leverages single-site understanding of the model in order to provide efficient methods that take advantage of higher-order gradients and model structure."),(0,r.mdx)("p",null,"Bean Machine includes the first implementation of Newtonian Monte Carlo (NMC) in a more general platform. NMC utilizes second-order gradient information to construct a multivariate Gaussian proposer that takes local curvature into account. As such, it can produce sample very efficiently with no warmup period when the posterior is roughly Gaussian. Bean Machine's structural understanding of the model lets us keep computation relatively cheap by only modeling a subset of the space that is relevant to updating a particular random variable."),(0,r.mdx)("p",null,"For certain domains, prepackaged inference methods may not be the best tool for the job. For example, if dealing with a problem specified in spherical coordinates, it may be useful to incorporate a notion of spherical locality into the inference proposal. Or, you may want to incorporate some notion of ordering when dealing with certain discrete random variables. Bean Machine exposes a flexible abstraction called ",(0,r.mdx)("em",{parentName:"p"},"custom proposers")," for just this problem. Custom proposers let the user design powerful new inference methods from the building blocks of existing ones, while easily plugging into Bean Machine's multi-site paradigm."),(0,r.mdx)("h3",{id:"bean-machine-graph-compilation"},"Bean Machine Graph compilation"),(0,r.mdx)("p",null,"PyTorch offers strong performance for models comprised of a small number of large tensors. However, many probabilistic models have a rich or sparse structure that is difficult to write in terms of just a handful of large tensor operations. And in many cases, these are exactly the problems for which probabilistic modeling is most compelling!"),(0,r.mdx)("p",null,"To address this, we are developing an experimental inference runtime called Bean Machine Graph (BMG) Inference. BMG Inference is a specialized combination of compiler and a fast, independent runtime that is optimized to run inference even for un-tensorized models. By design, BMG Inference has the same interface as other Bean Machine inference methods, relying on a custom behind-the-scenes compiler to interpret your model and translate it to a faster implementation with no Python dependencies."),(0,r.mdx)("p",null,"BMG Inference routinely achieves 1 to 2 orders-of-magnitude speedup for untensorized models. However, please note that this infrastructure is under development, and the supported feature set may be limited."))}c.isMDXComponent=!0},97629:function(e,a,n){a.Z=n.p+"assets/images/exponential_10-efd1ffd10a5e6115b52868fd955e31fa.png"},64821:function(e,a,n){a.Z=n.p+"assets/images/poisson_3-efa1b689adff7f22f127cbbc33a787a2.png"}}]);