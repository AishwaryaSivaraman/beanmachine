"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7824],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return u},MDXProvider:function(){return m},mdx:function(){return b},useMDXComponents:function(){return p},withMDXComponents:function(){return c}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){return function(n){var t=p(n.components);return r.createElement(e,i({},n,{components:t}))}},p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},37670:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],l={id:"beanstalk",title:"The Beanstalk Compiler",sidebar_label:"Beanstalk"},s=void 0,u={unversionedId:"overview/beanstalk/beanstalk",id:"overview/beanstalk/beanstalk",isDocsHomePage:!1,title:"The Beanstalk Compiler",description:"This page is Work in Progress!",source:"@site/../docs/overview/beanstalk/beanstalk.md",sourceDirName:"overview/beanstalk",slug:"/overview/beanstalk/beanstalk",permalink:"/docs/overview/beanstalk/beanstalk",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/overview/beanstalk/beanstalk.md",tags:[],version:"current",frontMatter:{id:"beanstalk",title:"The Beanstalk Compiler",sidebar_label:"Beanstalk"},sidebar:"someSidebar",previous:{title:"Analysis",permalink:"/docs/overview/analysis/analysis"},next:{title:"Contributing",permalink:"/docs/contributing"}},c=[],p={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"This page is Work in Progress!")),(0,i.mdx)("p",null,"Beanstalk is an experimental, just-in-time (JIT) compiler for Bean Machine. While we expect to continue to develop this compiler in the near future, currently it handles only a subset of the Bean Machine language. For example, it supports the following tutorials:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Linear Regression,"),(0,i.mdx)("li",{parentName:"ul"},"Gaussian Mixture Model (1D, mixture of 2) - TODO: The currently included tutorial is more general than that,"),(0,i.mdx)("li",{parentName:"ul"},"Neal's funnel.")),(0,i.mdx)("p",null,"The subset currently is limited to:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Univariate distributions,"),(0,i.mdx)("li",{parentName:"ul"},"Simple uses of tensors, for example, tensor addition and multiplication,"),(0,i.mdx)("li",{parentName:"ul"},"Limited control flow is supported,"),(0,i.mdx)("li",{parentName:"ul"},"Inference algorith - currently, only Newtonian Monte Carlo (NMC), is supported,"),(0,i.mdx)("li",{parentName:"ul"},"Only one chain of samples can be generated at a time.")),(0,i.mdx)("p",null,"To use Beanstalk to run an inference model, intsead of using a standard Bean Machine inference algorithm using a command such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"bm.SingleSiteNewtonianMonteCarlo().infer"),", simply include the compiler using ",(0,i.mdx)("inlineCode",{parentName:"p"},"from beanmachine.ppl.inference.bmg_inference import BMGInference")," and use ",(0,i.mdx)("inlineCode",{parentName:"p"},"BMGInference().infer"),"."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"BMGInference()")," object provides three utility methods that can be used to inspect the intermediate results of the compiler, namely:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BMGInference().to_dot(queries, observations)")," - Returns a DOT representation of the probabilistic graph of the model,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BMGInference().to_cpp(queries, observations)")," - Returns a C++ program that builds a version of this graph, and"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BMGInference().to_python(queries, observations)")," - Returns a Python program that builds a version of the graph.")))}m.isMDXComponent=!0}}]);