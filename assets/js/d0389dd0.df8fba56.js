"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7824],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),f=a,d=m["".concat(s,".").concat(f)]||m[f]||c[f]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7670:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"beanstalk",title:"The Beanstalk Compiler",sidebar_label:"Beanstalk"},s=void 0,u={unversionedId:"overview/beanstalk/beanstalk",id:"overview/beanstalk/beanstalk",isDocsHomePage:!1,title:"The Beanstalk Compiler",description:"This page is Work in Progress!",source:"@site/../docs/overview/beanstalk/beanstalk.md",sourceDirName:"overview/beanstalk",slug:"/overview/beanstalk/beanstalk",permalink:"/docs/overview/beanstalk/beanstalk",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/overview/beanstalk/beanstalk.md",tags:[],version:"current",frontMatter:{id:"beanstalk",title:"The Beanstalk Compiler",sidebar_label:"Beanstalk"},sidebar:"someSidebar",previous:{title:"Analysis",permalink:"/docs/overview/analysis/analysis"},next:{title:"Contributing",permalink:"/docs/contributing"}},p=[],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This page is Work in Progress!")),(0,i.kt)("p",null,"Beanstalk is an experimental, just-in-time (JIT) compiler for Bean Machine. While we expect to continue to develop this compiler in the near future, currently it handles only a subset of the Bean Machine language. For example, it supports the following tutorials:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Linear Regression,"),(0,i.kt)("li",{parentName:"ul"},"Gaussian Mixture Model (1D, mixture of 2) - TODO: The currently included tutorial is more general than that,"),(0,i.kt)("li",{parentName:"ul"},"Neal's funnel.")),(0,i.kt)("p",null,"The subset currently is limited to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Univariate distributions,"),(0,i.kt)("li",{parentName:"ul"},"Simple uses of tensors, for example, tensor addition and multiplication,"),(0,i.kt)("li",{parentName:"ul"},"Limited control flow is supported,"),(0,i.kt)("li",{parentName:"ul"},"Inference algorith - currently, only Newtonian Monte Carlo (NMC), is supported,"),(0,i.kt)("li",{parentName:"ul"},"Only one chain of samples can be generated at a time.")),(0,i.kt)("p",null,"To use Beanstalk to run an inference model, intsead of using a standard Bean Machine inference algorithm using a command such as ",(0,i.kt)("inlineCode",{parentName:"p"},"bm.SingleSiteNewtonianMonteCarlo().infer"),", simply include the compiler using ",(0,i.kt)("inlineCode",{parentName:"p"},"from beanmachine.ppl.inference.bmg_inference import BMGInference")," and use ",(0,i.kt)("inlineCode",{parentName:"p"},"BMGInference().infer"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"BMGInference()")," object provides three utility methods that can be used to inspect the intermediate results of the compiler, namely:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BMGInference().to_dot(queries, observations)")," - Returns a DOT representation of the probabilistic graph of the model,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BMGInference().to_cpp(queries, observations)")," - Returns a C++ program that builds a version of this graph, and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BMGInference().to_python(queries, observations)")," - Returns a Python program that builds a version of the graph.")))}m.isMDXComponent=!0}}]);