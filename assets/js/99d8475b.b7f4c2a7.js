"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7383],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||c[f]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3982:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s=void 0,p={unversionedId:"framework_topics/custom_proposers/variable",id:"framework_topics/custom_proposers/variable",isDocsHomePage:!1,title:"variable",description:"Worlds and Variables",source:"@site/../docs/framework_topics/custom_proposers/variable.md",sourceDirName:"framework_topics/custom_proposers",slug:"/framework_topics/custom_proposers/variable",permalink:"/docs/framework_topics/custom_proposers/variable",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/framework_topics/custom_proposers/variable.md",tags:[],version:"current",frontMatter:{}},d=[{value:"Worlds and Variables",id:"worlds-and-variables",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"worlds-and-variables"},"Worlds and Variables"),(0,i.kt)("p",null,"A crucial part of Bean Machine inference is its ability track the state of inference using ",(0,i.kt)("inlineCode",{parentName:"p"},"World"),"s. During inference, the ",(0,i.kt)("inlineCode",{parentName:"p"},"World")," represents the state of the variables and their dependencies. The ",(0,i.kt)("inlineCode",{parentName:"p"},"World")," is a graphical data structure where each node in the graph represents a ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," containing information about the variable's value, distribution, probability, etc. The edges between nodes represent the dependencies between variables. Each variable tracks its parent variables as well as its children variables."),(0,i.kt)("h4",{id:"rvidentifier"},"RVIdentifier"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RVIdentifier")," is a dataclass used to identify the random variable and does not contain any of the inference information. It only consists of the variable's ",(0,i.kt)("inlineCode",{parentName:"p"},"function")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," as supplied in the model declaration."),(0,i.kt)("h4",{id:"variable"},"Variable"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," represents the instantiation of each random variable in a model. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"RVIdentifier")," has a corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),". It has the following attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"distribution: Distribution")," - the prior distribution denoted in the modeled"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value: Tensor")," - the value of the Variable at the current state of inference"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parent: Set[Optional[RVIdentifier]]")," - the set of random variables called within the function declaration of the random variable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"children: Set[Optional[RVIdentifier]]")," - the set of random variables which call this variable in their function declaration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log_prob: Tensor")," - the log probability of the value with the prior distribution"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"proposal_distribution: ProposalDistribution")," - the proposal distribution used during inference"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_discrete: bool")," - an indicator of whether it is a discrete variable as opposed to a continuous variable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transform: Transform")," - a Transform to be applied in order to reshape the state space, see Transform documentation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transformed_value: Tensor")," - the value of the variable in the transformed space. This value will be the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," when no transforms are specified."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jacobian: Tensor")," - the log Jacobian determinant of the transforms")),(0,i.kt)("p",null,"When writing custom proposers, the two most relevant functions within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," API are"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"transform_value(self, value: Tensor) -> Tensor\ninverse_transform_value(self, transformed_value: Tensor) -> Tensor\n")),(0,i.kt)("p",null,"Because Bean Machine expects the proposal to be a value in its original space, it may be helpful to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variable.transformed_value")," throughout inference before converting back to the original space using ",(0,i.kt)("inlineCode",{parentName:"p"},"inverse_transform_value"),"."),(0,i.kt)("h4",{id:"world"},"World"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"World")," tracks the variables through the ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldVars")," class, which associates each ",(0,i.kt)("inlineCode",{parentName:"p"},"RVIdentifier")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable"),". When new values are proposed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"World")," and the world is updated to reflect these changes, these changes are stored in the world's ",(0,i.kt)("inlineCode",{parentName:"p"},"DiffStack"),", which is a stack of ",(0,i.kt)("inlineCode",{parentName:"p"},"Diff"),"s, each tracking Variables with differing values probabilities, parents, children, etc."),(0,i.kt)("p",null,"When writing custom proposers for random variables, it is often important to access the ",(0,i.kt)("inlineCode",{parentName:"p"},"Variable")," corresponding to the ",(0,i.kt)("inlineCode",{parentName:"p"},"RVIdentifier")," to see the current value, sample from the variable's prior distribution, etc. This can be done through the function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"get_node_in_world(node: RVIdentifier, to_be_copied = False, to_create_new_diff = False)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to_be_copied"),": a flag indicating if the world should copy this variable to the ",(0,i.kt)("inlineCode",{parentName:"li"},"DiffStack")," and start tracking changes. Within the ",(0,i.kt)("inlineCode",{parentName:"li"},"proposal")," method of a proposer, this should generally be set to False, as the world will automatically add the proposed value for the Variable to a ",(0,i.kt)("inlineCode",{parentName:"li"},"Diff")," once the proposal method is completed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to_create_new_diff"),": whether an additional diff with these changes should be added to the top of the ",(0,i.kt)("inlineCode",{parentName:"li"},"DiffStack"),". This should generally be set to False.")))}u.isMDXComponent=!0}}]);